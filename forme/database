CREATE TABLE admin (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    mumbai_cost DECIMAL(10, 2) NOT NULL,
    out_of_mumbai_cost DECIMAL(10, 2) NOT NULL,
    lock_status BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE supervisor (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE zones (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    incharge VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255) NOT NULL,
    publish BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE areas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    incharge VARCHAR(255) NOT NULL,
    zone_name VARCHAR(255) NOT NULL,
    zone_incharge VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255) NOT NULL,
    publish BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    pfp TEXT,
    area_name VARCHAR(255) NOT NULL,
    area_incharge VARCHAR(255) NOT NULL,
    zone_name VARCHAR(255) NOT NULL,
    zone_incharge VARCHAR(255) NOT NULL,
    regions_incharge_of INT DEFAULT 2, -- 2=region2 only, 1=region1 only, 0=both regions
    rate_r1 DECIMAL(10, 2),
    rate_r2 DECIMAL(10, 2),
    publish BOOLEAN DEFAULT TRUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE feedback (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    feedback TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    receipt INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NULL,
    email VARCHAR(255) NULL,
    type INT DEFAULT 1,
    region INT DEFAULT 2,
    user_name VARCHAR(255) NOT NULL,
    area_name VARCHAR(255) NOT NULL,
    area_incharge VARCHAR(255) NOT NULL,
    zone_name VARCHAR(255) NOT NULL,
    zone_incharge VARCHAR(255) NOT NULL,
    status BOOLEAN DEFAULT FALSE,
    payment_status BOOLEAN DEFAULT FALSE,
    amount_paid DECIMAL(10, 2) DEFAULT 0.00,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE receipts (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_name VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(255),
    paid_by VARCHAR(255) NOT NULL,
    collected_by VARCHAR(255) NOT NULL,
    img TEXT NOT NULL,
    rate DECIMAL(10, 2) NOT NULL,
    hissa INT NOT NULL,
    total_amt DECIMAL(10, 2) NOT NULL,
    area_name VARCHAR(255) NOT NULL,
    area_incharge VARCHAR(255) NOT NULL,
    zone_name VARCHAR(255) NOT NULL,
    zone_incharge VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE VIEW dashboard AS
SELECT 
    -- Mumbai (Region 1) data
    COALESCE(mumbai_stats.animal_count, 0) as animals_mumbai,
    COALESCE(mumbai_stats.total_customers, 0) as shares_mumbai,
    COALESCE(mumbai_stats.total_amount, 0) as total_amount_mumbai,
    COALESCE(mumbai_stats.paid_count, 0) as paid_mumbai,
    COALESCE(mumbai_stats.paid_amount, 0) as paid_amount_mumbai,
    COALESCE(mumbai_stats.pending_count, 0) as pending_mumbai,
    COALESCE(mumbai_stats.pending_amount, 0) as pending_amount_mumbai,
    
    -- Out of Mumbai (Region 2) data
    COALESCE(out_mumbai_stats.animal_count, 0) as animals_out_mumbai,
    COALESCE(out_mumbai_stats.total_customers, 0) as shares_out_mumbai,
    COALESCE(out_mumbai_stats.total_amount, 0) as total_amount_out_mumbai,
    COALESCE(out_mumbai_stats.paid_count, 0) as paid_out_mumbai,
    COALESCE(out_mumbai_stats.paid_amount, 0) as paid_amount_out_mumbai,
    COALESCE(out_mumbai_stats.pending_count, 0) as pending_out_mumbai,
    COALESCE(out_mumbai_stats.pending_amount, 0) as pending_amount_out_mumbai

FROM 
(
    -- Mumbai (Region 1) statistics
    SELECT 
        FLOOR(COUNT(*) / 7) as animal_count,
        COUNT(*) as total_customers,
        SUM(
            CASE 
                WHEN c.amount_paid > 0 THEN c.amount_paid
                ELSE COALESCE(u.rate_r1, 0)
            END
        ) as total_amount,
        SUM(CASE WHEN c.payment_status = TRUE THEN 1 ELSE 0 END) as paid_count,
        SUM(
            CASE 
                WHEN c.payment_status = TRUE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u.rate_r1, 0)
                    END
                ELSE 0
            END
        ) as paid_amount,
        SUM(CASE WHEN c.payment_status = FALSE THEN 1 ELSE 0 END) as pending_count,
        SUM(
            CASE 
                WHEN c.payment_status = FALSE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u.rate_r1, 0)
                    END
                ELSE 0
            END
        ) as pending_amount
    FROM customers c
    LEFT JOIN users u ON (
        c.user_name = u.name AND 
        c.area_name = u.area_name AND 
        c.area_incharge = u.area_incharge AND 
        c.zone_name = u.zone_name AND 
        c.zone_incharge = u.zone_incharge
    )
    WHERE c.status = TRUE AND c.region = 1
) as mumbai_stats

CROSS JOIN 

(
    -- Out of Mumbai (Region 2) statistics
    SELECT 
        FLOOR(COUNT(*) / 7) as animal_count,
        COUNT(*) as total_customers,
        SUM(
            CASE 
                WHEN c.amount_paid > 0 THEN c.amount_paid
                ELSE COALESCE(u.rate_r2, 0)
            END
        ) as total_amount,
        SUM(CASE WHEN c.payment_status = TRUE THEN 1 ELSE 0 END) as paid_count,
        SUM(
            CASE 
                WHEN c.payment_status = TRUE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u.rate_r2, 0)
                    END
                ELSE 0
            END
        ) as paid_amount,
        SUM(CASE WHEN c.payment_status = FALSE THEN 1 ELSE 0 END) as pending_count,
        SUM(
            CASE 
                WHEN c.payment_status = FALSE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u.rate_r2, 0)
                    END
                ELSE 0
            END
        ) as pending_amount
    FROM customers c
    LEFT JOIN users u ON (
        c.user_name = u.name AND 
        c.area_name = u.area_name AND 
        c.area_incharge = u.area_incharge AND 
        c.zone_name = u.zone_name AND 
        c.zone_incharge = u.zone_incharge
    )
    WHERE c.status = TRUE AND c.region = 2
) as out_mumbai_stats;


CREATE VIEW user_summary AS
SELECT 
    u.id as user_id,
    u.name as user_name,
    u.phone,
    u.email,
    u.area_name,
    u.area_incharge,
    u.zone_name,
    u.zone_incharge,
    u.rate_r1,
    u.rate_r2,
    u.regions_incharge_of as region, -- Added region field
    -- Mumbai (Region 1) statistics
    COALESCE(mumbai_stats.animal_count, 0) as animals_mumbai,
    COALESCE(mumbai_stats.total_customers, 0) as shares_mumbai,
    COALESCE(mumbai_stats.paid_count, 0) as paid_mumbai,
    COALESCE(mumbai_stats.paid_amount, 0) as paid_amount_mumbai,
    COALESCE(mumbai_stats.pending_count, 0) as pending_mumbai,
    COALESCE(mumbai_stats.pending_amount, 0) as pending_amount_mumbai,
    -- Out of Mumbai (Region 2) statistics
    COALESCE(out_mumbai_stats.animal_count, 0) as animals_out_mumbai,
    COALESCE(out_mumbai_stats.total_customers, 0) as shares_out_mumbai,
    COALESCE(out_mumbai_stats.paid_count, 0) as paid_out_mumbai,
    COALESCE(out_mumbai_stats.paid_amount, 0) as paid_amount_out_mumbai,
    COALESCE(out_mumbai_stats.pending_count, 0) as pending_out_mumbai,
    COALESCE(out_mumbai_stats.pending_amount, 0) as pending_amount_out_mumbai,
    -- Total statistics across both regions
    COALESCE(mumbai_stats.animal_count, 0) + COALESCE(out_mumbai_stats.animal_count, 0) as total_animals,
    COALESCE(mumbai_stats.total_customers, 0) + COALESCE(out_mumbai_stats.total_customers, 0) as total_shares,
    COALESCE(mumbai_stats.paid_count, 0) + COALESCE(out_mumbai_stats.paid_count, 0) as total_paid,
    COALESCE(mumbai_stats.paid_amount, 0) + COALESCE(out_mumbai_stats.paid_amount, 0) as total_paid_amount,
    COALESCE(mumbai_stats.pending_count, 0) + COALESCE(out_mumbai_stats.pending_count, 0) as total_pending,
    COALESCE(mumbai_stats.pending_amount, 0) + COALESCE(out_mumbai_stats.pending_amount, 0) as total_pending_amount
FROM users u
LEFT JOIN (
    SELECT 
        c.user_name,
        c.area_name,
        c.area_incharge,
        c.zone_name,
        c.zone_incharge,
        FLOOR(COUNT(*) / 7) as animal_count,
        COUNT(*) as total_customers,
        SUM(CASE WHEN c.payment_status = TRUE THEN 1 ELSE 0 END) as paid_count,
        SUM(
            CASE 
                WHEN c.payment_status = TRUE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u2.rate_r1, 0)
                    END
                ELSE 0
            END
        ) as paid_amount,
        SUM(CASE WHEN c.payment_status = FALSE THEN 1 ELSE 0 END) as pending_count,
        SUM(
            CASE 
                WHEN c.payment_status = FALSE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u2.rate_r1, 0)
                    END
                ELSE 0
            END
        ) as pending_amount
    FROM customers c
    LEFT JOIN users u2 ON (
        c.user_name = u2.name AND 
        c.area_name = u2.area_name AND 
        c.area_incharge = u2.area_incharge AND 
        c.zone_name = u2.zone_name AND 
        c.zone_incharge = u2.zone_incharge
    )
    WHERE c.status = TRUE AND c.region = 1
    GROUP BY c.user_name, c.area_name, c.area_incharge, c.zone_name, c.zone_incharge
) as mumbai_stats ON (
    u.name = mumbai_stats.user_name AND 
    u.area_name = mumbai_stats.area_name AND 
    u.area_incharge = mumbai_stats.area_incharge AND 
    u.zone_name = mumbai_stats.zone_name AND 
    u.zone_incharge = mumbai_stats.zone_incharge
)
LEFT JOIN (
    SELECT 
        c.user_name,
        c.area_name,
        c.area_incharge,
        c.zone_name,
        c.zone_incharge,
        FLOOR(COUNT(*) / 7) as animal_count,
        COUNT(*) as total_customers,
        SUM(CASE WHEN c.payment_status = TRUE THEN 1 ELSE 0 END) as paid_count,
        SUM(
            CASE 
                WHEN c.payment_status = TRUE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u2.rate_r2, 0)
                    END
                ELSE 0
            END
        ) as paid_amount,
        SUM(CASE WHEN c.payment_status = FALSE THEN 1 ELSE 0 END) as pending_count,
        SUM(
            CASE 
                WHEN c.payment_status = FALSE THEN 
                    CASE 
                        WHEN c.amount_paid > 0 THEN c.amount_paid
                        ELSE COALESCE(u2.rate_r2, 0)
                    END
                ELSE 0
            END
        ) as pending_amount
    FROM customers c
    LEFT JOIN users u2 ON (
        c.user_name = u2.name AND 
        c.area_name = u2.area_name AND 
        c.area_incharge = u2.area_incharge AND 
        c.zone_name = u2.zone_name AND 
        c.zone_incharge = u2.zone_incharge
    )
    WHERE c.status = TRUE AND c.region = 2
    GROUP BY c.user_name, c.area_name, c.area_incharge, c.zone_name, c.zone_incharge
) as out_mumbai_stats ON (
    u.name = out_mumbai_stats.user_name AND 
    u.area_name = out_mumbai_stats.area_name AND 
    u.area_incharge = out_mumbai_stats.area_incharge AND 
    u.zone_name = out_mumbai_stats.zone_name AND 
    u.zone_incharge = out_mumbai_stats.zone_incharge
)
WHERE u.publish = TRUE
ORDER BY u.name;



INSERT INTO admin (username, password, mumbai_cost, out_of_mumbai_cost, lock_status) 
VALUES ('admin_user', 'hashed_password', 1500.00, 2000.00, FALSE);

INSERT INTO supervisor (username, password) 
VALUES ('supervisor_user', 'hashed_password');

INSERT INTO zones (name, incharge, phone, email, publish) 
VALUES 
('Zone 1', 'John Doe', '9876543210', 'john@example.com', TRUE),
('Zone 2', 'Alice Johnson', '9876543220', 'alice@example.com', TRUE);

INSERT INTO areas (name, incharge, zone_name, zone_incharge, phone, email, publish) 
VALUES 
('Area 1', 'Jane Smith', 'Zone 1', 'John Doe', '9876543211', 'jane@example.com', TRUE),
('Area 2', 'Bob Wilson', 'Zone 1', 'John Doe', '9876543212', 'bob@example.com', TRUE),
('Area 3', 'Carol Brown', 'Zone 2', 'Alice Johnson', '9876543213', 'carol@example.com', TRUE);

INSERT INTO users (name, phone, email, password, pfp, area_name, area_incharge, zone_name, zone_incharge, regions_incharge_of, rate_r1, rate_r2, publish) 
VALUES 
('User Name', '9876543214', 'user@example.com', '123456789', 'https://example.com/profile.jpg', 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe', 2, 100.00, 150.00, TRUE),
('User Two', '9876543215', 'user2@example.com', '987654321', 'https://example.com/profile2.jpg', 'Area 2', 'Bob Wilson', 'Zone 1', 'John Doe', 1, 120.00, 180.00, TRUE),
('User Three', '9876543216', 'user3@example.com', '123987456', 'https://example.com/profile3.jpg', 'Area 3', 'Carol Brown', 'Zone 2', 'Alice Johnson', 0, 110.00, 160.00, TRUE);

INSERT INTO feedback (name, feedback) 
VALUES 
('John Smith', 'This is a sample feedback that can contain multiple paragraphs and a lot of text content. The service was excellent and I would highly recommend it to others.'),
('Mary Johnson', 'Great service and professional staff. Very satisfied with the results.');

INSERT INTO customers (receipt, name, phone, email, type, region, user_name, area_name, area_incharge, zone_name, zone_incharge, status, payment_status, amount_paid) 
VALUES 
(1001, 'Customer One', '9876543217', 'customer1@example.com', 1, 2, 'User Name', 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe', TRUE, TRUE, 150.00),
(1002, 'Customer Two', '9876543218', 'customer2@example.com', 1, 1, 'User Two', 'Area 2', 'Bob Wilson', 'Zone 1', 'John Doe', TRUE, FALSE, 0.00),
(1003, 'Customer Three', '9876543219', 'customer3@example.com', 2, 2, 'User Name', 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe', TRUE, TRUE, 100.00),
(1004, 'Customer Four', '9876543220', 'customer4@example.com', 1, 2, 'User Three', 'Area 3', 'Carol Brown', 'Zone 2', 'Alice Johnson', FALSE, FALSE, 0.00),
(1005, 'Customer Five', '9876543221', 'customer5@example.com', 1, 1, 'User Two', 'Area 2', 'Bob Wilson', 'Zone 1', 'John Doe', TRUE, TRUE, 120.00),
(1006, 'Customer Six', '9876543222', 'customer6@example.com', 1, 1, 'User Name', 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe', TRUE, FALSE, 0.00),
(1007, 'Customer Seven', '9876543223', 'customer7@example.com', 1, 1, 'User Two', 'Area 2', 'Bob Wilson', 'Zone 1', 'John Doe', TRUE, TRUE, 120.00),
(1008, 'Customer Eight', '9876543224', 'customer8@example.com', 1, 1, 'User Name', 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe', FALSE, FALSE, 0.00),
(1009, 'Customer Nine', '9876543225', 'customer9@example.com', 2, 1, 'User Two', 'Area 2', 'Bob Wilson', 'Zone 1', 'John Doe', TRUE, FALSE, 0.00),
(1010, 'Customer Ten', '9876543226', 'customer10@example.com', 1, 1, 'User Name', 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe', TRUE, TRUE, 100.00);

INSERT INTO receipts (user_name, phone, email, paid_by, collected_by, img, rate, hissa, total_amt, area_name, area_incharge, zone_name, zone_incharge) 
VALUES 
('User Name', '9876543217', 'customer1@example.com', 'Customer One', 'User Name', 'https://example.com/profile.jpg', 100.00, 5, 500.00, 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe'),
('User Name', '9876543219', 'customer3@example.com', 'Customer Three', 'User Name', 'https://example.com/profile1.jpg', 100.00, 3, 300.00, 'Area 1', 'Jane Smith', 'Zone 1', 'John Doe'),
('User Two', '9876543221', 'customer5@example.com', 'Customer Five', 'User Two', 'https://example.com/profile2.jpg', 120.00, 4, 480.00, 'Area 2', 'Bob Wilson', 'Zone 1', 'John Doe');

-- Sample queries to view the auto-updating data
-- SELECT * FROM user_summary;
-- SELECT * FROM animal_count;

-- Additional useful queries for animal count analysis
-- SELECT * FROM user_summary;
-- SELECT * FROM animal_count;

-- Query to see region-wise breakdown by zone
-- SELECT zone_name, 
--        SUM(region1_total) as total_region1, 
--        SUM(region1_divided_by_7) as region1_floor_div_7,
--        SUM(region1_paid) as region1_paid, 
--        SUM(region1_pending) as region1_pending,
--        SUM(region1_amount_expected) as region1_expected_amount,
--        SUM(region2_total) as total_region2, 
--        SUM(region2_paid) as region2_paid, 
--        SUM(region2_pending) as region2_pending,
--        SUM(region2_amount_expected) as region2_expected_amount
-- FROM animal_count 
-- GROUP BY zone_name;

-- Query to see only verified customers (status = TRUE)
-- SELECT * FROM customers WHERE status = TRUE;

-- Query to see unverified customers (status = FALSE) - these are excluded from views
-- SELECT * FROM customers WHERE status = FALSE;